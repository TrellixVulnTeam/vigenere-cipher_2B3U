class VigenereChiper:
    def __init__(self):
        self.text = ''
        self.keyword = ''

        self.__alphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

    def key_generator(self, text, keyword):
        key = []
        key_count = 0
        for i in range(0, len(self.text)):
            if self.text[i] == " ":
                key.append(" ")
            else:
                x = key_count % len(self.keyword)
                key.append(self.keyword[x])
                key_count += 1

        key = ''.join(str(s) for s in key)
        return key

    def get_alphabets(self):
        return self.__alphabets

    def encryptor(self, text, keyword):
        key = self.key_generator(text, keyword)
        alphabets = self.get_alphabets()

        encrypted = ""

        for i in range(0, len(self.text)):
            if self.text[i] == " ":
                encrypted += " "
            else:
                value = (alphabets.find(
                    self.text[i]) + alphabets.find(key[i])) % 26
                encrypted += alphabets[value]

        return encrypted

    def decryptor(self, encrypt_text, keyword):
        key = self.key_generator(encrypt_text, keyword)
        alphabets = self.get_alphabets()

        decrypted = ""

        for i in range(0, len(self.text)):
            if encrypt_text[i] == " ":
                decrypted += " "
            else:
                value = (alphabets.find(
                    encrypt_text[i]) - alphabets.find(key[i])) % 26
                decrypted += alphabets[value]

        return decrypted
